<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:salesforce="http://www.mulesoft.org/schema/mule/salesforce"
      xmlns:workday="http://www.mulesoft.org/schema/mule/workday" xmlns:email="http://www.mulesoft.org/schema/mule/email"
      xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
      xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/email http://www.mulesoft.org/schema/mule/email/current/mule-email.xsd
http://www.mulesoft.org/schema/mule/workday http://www.mulesoft.org/schema/mule/workday/current/mule-workday.xsd
http://www.mulesoft.org/schema/mule/salesforce http://www.mulesoft.org/schema/mule/salesforce/current/mule-salesforce.xsd">
	<flow name="businesslogicFlow">
        <set-payload value="[]" doc:name="Set Payload to avoid issue with scatter-gather" doc:id="a962d857-5c72-4ccf-881a-38dd87847914" />
		<scatter-gather doc:name="Scatter-Gather">
            <route>
                <ee:transform doc:name="Prepare Get Workers request" doc:id="5ddb1536-1e04-4131-b020-a946b4d430b1" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/xml
ns ns0 urn:com.workday/bsvc
---
{
	ns0#Get_Workers_Request: {
		ns0#Request_Criteria: {
			ns0#Exclude_Inactive_Workers: true
		},
		ns0#Response_Group: {
			ns0#Include_Reference: true,
			ns0#Include_Personal_Information: true
		}
	}
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<workday:human-resources operation="Get_Workers" doc:name="Get workers from Workday" doc:id="94b09d5c-182f-4b35-b6de-b39ffba837e1" config-ref="Workday_Config"/>
				<ee:transform doc:name="Transform Workday response" doc:id="f2114fbc-b82d-48ed-be3b-980252e6f446" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
ns ns0 urn:com.workday/bsvc
---
payload.ns0#Get_Workers_Response.ns0#Response_Data.*ns0#Worker map ((worker , indexOfWorker) -> {
	Id: worker.ns0#Worker_Reference.ns0#ID,
	Name: worker.ns0#Worker_Data.ns0#Personal_Data.ns0#Name_Data.ns0#Legal_Name_Data.ns0#Name_Detail_Data.@ns0#Formatted_Name,
	Email: worker.ns0#Worker_Data.ns0#Personal_Data.ns0#Contact_Data.ns0#Email_Address_Data.ns0#Email_Address,
	Username: worker.ns0#Worker_Data.ns0#User_ID
})]]></ee:set-payload>
					</ee:message>
				</ee:transform>
            </route>
			<route >
				<salesforce:query doc:name="Query Users in SFDC" doc:id="18eb1f0f-bbae-4e5a-b7c9-75a28c0cf0e2" config-ref="Salesforce_Sfdc_config">
					<salesforce:salesforce-query >SELECT Name, Email, Username, Id  FROM User</salesforce:salesforce-query>
				</salesforce:query>
			</route>
        </scatter-gather>
<ee:transform doc:name="Aggregate results and transform to CSV" doc:id="fd27ba32-c22a-436c-8550-75136a9c04cf">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/csv separator=","
import mergeWith from dw::core::Objects
var workers = payload["0"].payload map (item) -> {
	"IDInWorkday": item.Id,
	"NameInWorkday": item.Name,
	"Email": item.Email,
	"UserNameInWorkday": item.Username
}
var users = payload["1"].payload map (item) -> {
	"IDInSFDC": item.Id,
	"NameInSFDC": item.Name,
	"Email": item.Email,
	"UserNameInSFDC": item.Username
}
var mergedItems =  (
                workers map ((item) -> item mergeWith ((users filter ($.Email == item.Email))[0]
                    default {IDInSFDC: "", NameInSFDC: "", UserNameInSFDC: ""}
                ))
            ) distinctBy $.Email
            ++ (
                users map ((item) -> item mergeWith ((workers filter ($.Email == item.Email))[0]
                    default {IDInWorkday: "", NameInWorkday: "", UserNameInWorkday: ""}
                ))
            ) distinctBy $.Email
fun sortBySourceExistence (items) = ((items map (item) -> (
        item ++ {
            sortValue:  if ((item.IDInWorkday != "") and (item.IDInSFDC == "")) 1
                        else if ((item.IDInSFDC != "") and (item.IDInWorkday == "")) 2
                        else 3
        }
    )
) orderBy $.sortValue ) map $ -"sortValue"
---
sortBySourceExistence(mergedItems) map (item) -> {
	"Email": item.Email,
	"IDInWorkday": item.IDInWorkday,
	"NameInWorkday": item.NameInWorkday,
	"UserNameInWorkday": item.UserNameInWorkday,
	"IDInSFDC": item.IDInSFDC,
	"NameInSFDC": item.NameInSFDC,
	"UserNameInSFDC": item.UserNameInSFDC
}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
		<email:send config-ref="Gmail_SMTP" doc:name="Send migration result email" fromAddress="${mail.from}"
                    subject="${mail.subject}">
            <email:to-addresses>
                <email:to-address value="${mail.to}"/>
            </email:to-addresses>
            <email:body contentType="text/plain">
                <email:content><![CDATA[${mail.body}]]></email:content>
            </email:body>
            <email:attachments><![CDATA[#[{'${attachment.name}' : payload}]]]></email:attachments>

        </email:send>
    </flow>
    <flow name="mainFlow">
        <flow-ref doc:name="Call businesslogicFlow" name="businesslogicFlow"/>
        <error-handler>
            <on-error-propagate enableNotifications="true" logException="true" doc:name="On Error Propagate" type="ANY">
                <flow-ref doc:name="errorHandlingFlow" name="errorHandlingFlow"/>
            </on-error-propagate>
        </error-handler>
    </flow>

</mule>

        