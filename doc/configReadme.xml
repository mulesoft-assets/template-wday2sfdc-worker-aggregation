<?xml version='1.0' encoding='utf-8'?>
<configuration>
	<placeholders>
		<placeholder id="template_name">Workday and Salesforce Worker Aggregation</placeholder>
	</placeholders>
	<sections>
		<section id="use_case">
As a Salesforce admin I want to aggregate users from Workday and Salesforce and compare them to see which users can only be found in one of the two and which users are in both instances. 

For practical purposes this Template will generate the result in the format of a CSV Report sent by Email.

This template serves as a foundation for extracting data from two systems, aggregating data, comparing values of fields for the objects, and generating a report on the differences. 

As implemented, it gets workers from Workday and users from Salesforce, compares by the Email address of the workers and users, and generates a CSV file which shows workers in Workday, users in Salesforce. The report is then emailed to a configured email address.
		</section>
		<section id="considerations">

To run this template, there are certain preconditions that must be considered. All of them deal with the preparations in both, that must be made for the template to run smoothly. **Failing to do so could lead to unexpected behavior of the template.**

		</section>
		<section id="wday_src">

The Workday connector currently does not support autopaging functionality out of the box so number of processed objects are limited to the connector's single page size.

		</section>
		<section id="running_on_cloudhub">

Once your app is all set and started, supposing you choose as domain name `workdayworkersaggregation` to trigger the use case you just need to browse to `http://workdayworkersaggregation.cloudhub.io/generatereport` and the report will be sent to the emails configured.


		</section>
		<section id="default_running_on_premise">

Complete all properties in one of the property files, for example in [mule.prod.properties] (../blob/master/src/main/resources/mule.prod.properties) and run your app with the corresponding environment variable to use it. To follow the example, this will be `mule.env=prod`.

After this, to trigger the use case you just need to browse to the local http endpoint with the port you configured in your file. If this is, for instance, `9090` then you should browse to: `http://localhost:9090/generatereport` and this will create a CSV report and send it to the mails set.

		</section>
		<section id="application_configuration">
		
+ http.port `9090` 

#### Workday Connector configuration
 + wday.user `joan`
 + wday.tenant `acme_pt1`
 + wday.password `joanPass123`
 + wday.hostname `your_impl-cc.workday.com`

#### SalesForce Connector configuration
+ sfdc.username `joan.baez@orgb`
+ sfdc.password `JoanBaez456`
+ sfdc.securityToken `ces56arl7apQs56XTddf34X`

#### SMTP Services configuration
+ smtp.host `smtp.gmail.com`
+ smtp.port `587`
+ smtp.user `exampleuser@gmail.com`
+ smtp.password `ExamplePassword456`

#### Mail details
+ mail.from `exampleuser@gmail.com`
+ mail.to `woody.guthrie@gmail.com`
+ mail.subject `Salesforce Users Report`
+ mail.body `Users report comparing users from Salesforce Accounts`
+ attachment.name `OrderedReport.csv`

		</section>
		<section id="api_calls">
		
SalesForce imposes limits on the number of API Calls that can be made. In this template there is only one call made so this is not something to worry about.

		</section>
		<section id="default_endpoints_xml">
		
This is the file where you will find the inbound side of your integration app.
This Template has an [HTTP Connector](http://www.mulesoft.org/documentation/display/current/HTTP+Connector) as the way to trigger the use case.

$H$H# Trigger Flow
**HTTP Listener Connector** - Start Report Generation
+ `${http.port}` is a property to be defined either in a property file or in CloudHub environment variables.
+ The path configured by default is `generatereport` and you are free to change for the one you prefer.
+ The host name for all endpoints in your CloudHub configuration should be defined as `localhost`. CloudHub will then route requests from your application domain URL to the endpoint.


		</section>
		<section id="default_business_logic_xml">
		
Functional aspect of the Template is implemented in this XML, directed by one flow responsible for aggregation of data, comparing records and finally formatting the output, in this case being a report.

Using Scatter-Gather component we are querying the data in different systems. After that the aggregation is implemented in DataWeave 2 script using Transform component.
Aggregated results are sorted by source of existence:

1. Workers only in Workday
2. Users only in Salesforce
3. Workers and Users in both Workday and Salesforce

and transformed to CSV format. Final report in CSV format is sent to email, that you configured in mule.*.properties file.

		</section>
	</sections>
</configuration>